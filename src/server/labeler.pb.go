// Code generated by protoc-gen-go. DO NOT EDIT.
// source: labeler.proto

package labeler

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type NodeLabel struct {
	Node                 string   `protobuf:"bytes,1,opt,name=node,proto3" json:"node,omitempty"`
	Label                string   `protobuf:"bytes,2,opt,name=label,proto3" json:"label,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NodeLabel) Reset()         { *m = NodeLabel{} }
func (m *NodeLabel) String() string { return proto.CompactTextString(m) }
func (*NodeLabel) ProtoMessage()    {}
func (*NodeLabel) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f7992ba896eeca0, []int{0}
}

func (m *NodeLabel) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NodeLabel.Unmarshal(m, b)
}
func (m *NodeLabel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NodeLabel.Marshal(b, m, deterministic)
}
func (m *NodeLabel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeLabel.Merge(m, src)
}
func (m *NodeLabel) XXX_Size() int {
	return xxx_messageInfo_NodeLabel.Size(m)
}
func (m *NodeLabel) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeLabel.DiscardUnknown(m)
}

var xxx_messageInfo_NodeLabel proto.InternalMessageInfo

func (m *NodeLabel) GetNode() string {
	if m != nil {
		return m.Node
	}
	return ""
}

func (m *NodeLabel) GetLabel() string {
	if m != nil {
		return m.Label
	}
	return ""
}

type PodLabel struct {
	Namespace            string   `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Pod                  string   `protobuf:"bytes,2,opt,name=pod,proto3" json:"pod,omitempty"`
	Label                string   `protobuf:"bytes,3,opt,name=label,proto3" json:"label,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PodLabel) Reset()         { *m = PodLabel{} }
func (m *PodLabel) String() string { return proto.CompactTextString(m) }
func (*PodLabel) ProtoMessage()    {}
func (*PodLabel) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f7992ba896eeca0, []int{1}
}

func (m *PodLabel) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PodLabel.Unmarshal(m, b)
}
func (m *PodLabel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PodLabel.Marshal(b, m, deterministic)
}
func (m *PodLabel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PodLabel.Merge(m, src)
}
func (m *PodLabel) XXX_Size() int {
	return xxx_messageInfo_PodLabel.Size(m)
}
func (m *PodLabel) XXX_DiscardUnknown() {
	xxx_messageInfo_PodLabel.DiscardUnknown(m)
}

var xxx_messageInfo_PodLabel proto.InternalMessageInfo

func (m *PodLabel) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *PodLabel) GetPod() string {
	if m != nil {
		return m.Pod
	}
	return ""
}

func (m *PodLabel) GetLabel() string {
	if m != nil {
		return m.Label
	}
	return ""
}

type Info struct {
	Info                 string   `protobuf:"bytes,1,opt,name=info,proto3" json:"info,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Info) Reset()         { *m = Info{} }
func (m *Info) String() string { return proto.CompactTextString(m) }
func (*Info) ProtoMessage()    {}
func (*Info) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f7992ba896eeca0, []int{2}
}

func (m *Info) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Info.Unmarshal(m, b)
}
func (m *Info) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Info.Marshal(b, m, deterministic)
}
func (m *Info) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Info.Merge(m, src)
}
func (m *Info) XXX_Size() int {
	return xxx_messageInfo_Info.Size(m)
}
func (m *Info) XXX_DiscardUnknown() {
	xxx_messageInfo_Info.DiscardUnknown(m)
}

var xxx_messageInfo_Info proto.InternalMessageInfo

func (m *Info) GetInfo() string {
	if m != nil {
		return m.Info
	}
	return ""
}

func init() {
	proto.RegisterType((*NodeLabel)(nil), "labeler.NodeLabel")
	proto.RegisterType((*PodLabel)(nil), "labeler.PodLabel")
	proto.RegisterType((*Info)(nil), "labeler.Info")
}

func init() { proto.RegisterFile("labeler.proto", fileDescriptor_5f7992ba896eeca0) }

var fileDescriptor_5f7992ba896eeca0 = []byte{
	// 199 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x50, 0xd1, 0xaa, 0x82, 0x40,
	0x14, 0xbc, 0x5e, 0xbd, 0xf7, 0xba, 0x07, 0xbc, 0xd4, 0xa1, 0x07, 0x91, 0x1e, 0xc2, 0xa7, 0x9e,
	0x24, 0x8a, 0x3e, 0x22, 0x90, 0x90, 0xfa, 0x02, 0x75, 0x8f, 0x20, 0xd8, 0x1e, 0xd9, 0xa2, 0xef,
	0x8f, 0x5d, 0x5d, 0x0d, 0x7a, 0x9b, 0x99, 0x3d, 0x33, 0xcc, 0x2c, 0x44, 0x5d, 0x59, 0x51, 0x47,
	0x3a, 0xeb, 0x35, 0x3f, 0x18, 0xff, 0x46, 0x9a, 0x1e, 0x41, 0x9c, 0x59, 0x52, 0x6e, 0x28, 0x22,
	0x04, 0x8a, 0x25, 0xc5, 0xde, 0xc6, 0xdb, 0x8a, 0x8b, 0xc5, 0xb8, 0x82, 0x1f, 0x7b, 0x1b, 0x7f,
	0x5b, 0x71, 0x20, 0x69, 0x01, 0x61, 0xc1, 0x72, 0x70, 0xad, 0x41, 0xa8, 0xf2, 0x46, 0xf7, 0xbe,
	0xac, 0x9d, 0x75, 0x16, 0x70, 0x01, 0x7e, 0xcf, 0x72, 0x74, 0x1b, 0x38, 0x27, 0xfa, 0xef, 0x89,
	0x09, 0x04, 0x27, 0xd5, 0xb0, 0xe9, 0xd0, 0xaa, 0x86, 0x5d, 0x07, 0x83, 0xf7, 0x1a, 0xfe, 0xf3,
	0xa1, 0xef, 0x95, 0xf4, 0xb3, 0xad, 0x09, 0x77, 0x20, 0xac, 0x62, 0xba, 0x23, 0x66, 0x6e, 0xdc,
	0x34, 0x25, 0x89, 0x26, 0xcd, 0xa4, 0xa6, 0x5f, 0x98, 0x41, 0x68, 0x5f, 0x0a, 0x96, 0xb8, 0x9c,
	0x1e, 0xdd, 0x88, 0x8f, 0xfb, 0xea, 0xd7, 0x7e, 0xd4, 0xe1, 0x15, 0x00, 0x00, 0xff, 0xff, 0x1e,
	0xa8, 0x70, 0x7f, 0x39, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// LabelerServiceClient is the client API for LabelerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type LabelerServiceClient interface {
	LabelNode(ctx context.Context, in *NodeLabel, opts ...grpc.CallOption) (*Info, error)
	LabelPod(ctx context.Context, in *PodLabel, opts ...grpc.CallOption) (*Info, error)
}

type labelerServiceClient struct {
	cc *grpc.ClientConn
}

func NewLabelerServiceClient(cc *grpc.ClientConn) LabelerServiceClient {
	return &labelerServiceClient{cc}
}

func (c *labelerServiceClient) LabelNode(ctx context.Context, in *NodeLabel, opts ...grpc.CallOption) (*Info, error) {
	out := new(Info)
	err := c.cc.Invoke(ctx, "/labeler.LabelerService/LabelNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *labelerServiceClient) LabelPod(ctx context.Context, in *PodLabel, opts ...grpc.CallOption) (*Info, error) {
	out := new(Info)
	err := c.cc.Invoke(ctx, "/labeler.LabelerService/LabelPod", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LabelerServiceServer is the server API for LabelerService service.
type LabelerServiceServer interface {
	LabelNode(context.Context, *NodeLabel) (*Info, error)
	LabelPod(context.Context, *PodLabel) (*Info, error)
}

// UnimplementedLabelerServiceServer can be embedded to have forward compatible implementations.
type UnimplementedLabelerServiceServer struct {
}

func (*UnimplementedLabelerServiceServer) LabelNode(ctx context.Context, req *NodeLabel) (*Info, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LabelNode not implemented")
}
func (*UnimplementedLabelerServiceServer) LabelPod(ctx context.Context, req *PodLabel) (*Info, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LabelPod not implemented")
}

func RegisterLabelerServiceServer(s *grpc.Server, srv LabelerServiceServer) {
	s.RegisterService(&_LabelerService_serviceDesc, srv)
}

func _LabelerService_LabelNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeLabel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LabelerServiceServer).LabelNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/labeler.LabelerService/LabelNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LabelerServiceServer).LabelNode(ctx, req.(*NodeLabel))
	}
	return interceptor(ctx, in, info, handler)
}

func _LabelerService_LabelPod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PodLabel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LabelerServiceServer).LabelPod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/labeler.LabelerService/LabelPod",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LabelerServiceServer).LabelPod(ctx, req.(*PodLabel))
	}
	return interceptor(ctx, in, info, handler)
}

var _LabelerService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "labeler.LabelerService",
	HandlerType: (*LabelerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LabelNode",
			Handler:    _LabelerService_LabelNode_Handler,
		},
		{
			MethodName: "LabelPod",
			Handler:    _LabelerService_LabelPod_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "labeler.proto",
}
